一、
    2.场景A
    （1） 不正确的隔离等级
        read committed不正确，因为当事务执行中可能会出现不可重复读和更新丢失的问题。
        (a)不可重复读，即在一个事务中，如果另一个事务提交，则两次不同的Select语句的结果将不同。
        比如在William存钱操作前后，Julie对同一个账户的存款进行查询，两次结果将不同。
        (b)更新丢失问题，即有两个事务读到同一数据，其中一个首先对此数据减300然后提交，另一个事务等待锁然后提交减400的操作，结果此数据只减少一次(减400)。

        解决方法是采用repeatable read或serializable隔离等级。
    （2） 确认信息位置不正确
        确认信息位置不正确，如用户可能在事务没有结束前就收到了操作完成的确认信息。当事务发生回滚后，事务将会被撤销，但是用户以为已经执行成功，会存在问题。
        所以，所有的确认信息必须在事务成功提交后进行显示。
    （3） 不正确的事务边界
        由于事务中一些语句的执行需要获得独占锁，如果事务边界包括了多个存取转账操作，则很可能其他人的业务会由于需要获得锁而长时间等待。
        且包括太多操作可能提升事务执行失败的几率。用户体验差。

        解决方法是一个业务（存、取、转账）对应一个事务。
    （4） 在事务边界内等待用户输入
        由于事务中一些语句的执行需要获得独占锁，如果在事务边界内等待用户输入，则很可能其他人的业务会由于需要获得锁锁而长时间等待。

        解决方法是在用户提交操作的信息后，再开始事务。

    3.场景B
    解决了2、3的问题（即确认信息位置不正确，不正确的事务边界的问题)：
    对于2问题，解决方法是将显示信息（ATM displays confirmation）放在了事务结束后。
    所以当事务回滚后，用户降收到成功或失败的信息，而不会不清楚执行成功与否。

    对于3问题，解决方法是缩小事务边界，一个事务仅包括一个业务。
    这样各个事务之间对锁的冲突现象会减少，降低了对整体性能的不良影响。

    但这样仍存在1、4问题。

    4.场景C
    解决了1问题（即隔离等级问题）:
    解决方法是将read committed事务隔离等级提升到serializable。
    采用serializable事务隔离等级，将不会存在不可重覆读和更新丢失的问题，同时解决幻读问题（在这个例子里不存在这个问题）

    但为了最高的并发性，serializable应替换为repeatable read，原因是此处不存在幻读问题。
    这样仍存在两个问题，一是用户输入问题，二是并发性问题。

    5.
    问题4和并发性问题仍未解决。
    正确的做法是将用户输入的钱数在事务开始前给出。
    同时调整隔离等级为repeatable read
    即:
        -- William
     (ATM)ATM prompts user for operation.
     (User)William Chooses Deposit into Savings.
     (ATM)ATM prompts user for amount.
     (User)William enters 400.

     (DBMS) i. Begin transaction (serializable isolation level)
     (DBMS) iii. Select balance of savings 
     (DBMS) savings_balance = savings_balance + $400
     (DBMS) v. Update savings balance in database.
     (DBMS) vii. End Transaction

     (ATM)ATM displays confirmation of deposit.
     (ATM)ATM prompts user for operation.
     (User)William chooses transfer from checking to savings.
     (ATM)ATM prompts user for amount.
     (User)William enters 300.

     (DBMS) ix. Begin transaction (serializable isolation level)
     (DBMS) xi. Select the checking balance.
     (DBMS)checking_balance = checking_balance - $300
     (DBMS) xiii. Select the savings balance.
     (DBMS)savings_balance = savings_balance + $300
     (DBMS) xvi. Update savings balance in database.
     (DBMS) xvii. Update checking balance in database.
     (DBMS) xviii. End Transaction

     (ATM)ATM displays confirmation of transfer.
     (ATM)ATM prompts user for operation.
     (User)William chooses no more operations.
     
     
            -- Julie
     (ATM)ATM prompts user for operation.
     (User)Julie Chooses Deposit into Checking.
     (ATM)ATM prompts user for amount.
     (User)Julie enters 500.

     (DBMS) ii. Begin transaction (serializable isolation level) 
     (DBMS) iv. Select balance of checking 
     (DBMS) checking_balance = checking_balance + $500 
     (DBMS) vi. Update checking balance in database. 
     (DBMS) viii. End Transaction 
     
     (ATM)ATM displays confirmation of deposit.
     (ATM)ATM prompts user for operation.
     (User)Julie chooses withdrawal from savings.
     (ATM)ATM prompts user for amount.
     (User)Julie enters 100.

     (DBMS) x. Begin transaction (serializable isolation level) 
     (DBMS) xii. Select the savings checking balance in database. 
     (DBMS) savings_balance = savings_balance - $100 
     (DBMS) xiv. Update savings balance in database. 
     (DBMS) xv. End Transaction 

     (ATM)ATM displays confirmation of withdrawal.
     (ATM)ATM prompts user for operation.
     (User)Julie chooses no more operations.
 
二、
详见java文件，共3处事务
